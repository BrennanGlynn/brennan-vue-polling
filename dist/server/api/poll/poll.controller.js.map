{"version":3,"sources":["../../../../server/api/poll/poll.controller.js"],"names":["Poll","require","exports","index","req","res","find","err","polls","handleError","status","json","results","show","findById","params","id","poll","send","create","body","destroy","remove","_id","update"],"mappings":";AAQA;;AAEA,IAAMA,OAAOC,QAAQ,cAAR,CAAb;;AAGAC,QAAQC,KAAR,GAAgB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAClCL,OAAKM,IAAL,CAAU,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AAC9B,QAAID,GAAJ,EAAS;AACP,aAAOE,YAAYJ,GAAZ,EAAiBE,GAAjB,CAAP;AACD;AACD,WAAOF,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAASJ,KAAX,EAArB,CAAP;AACD,GALD;AAMD,CAPD;;AAUAN,QAAQW,IAAR,GAAe,UAAUT,GAAV,EAAeC,GAAf,EAAoB;AACjCL,OAAKc,QAAL,CAAcV,IAAIW,MAAJ,CAAWC,EAAzB,EAA6B,UAAUT,GAAV,EAAeU,IAAf,EAAqB;AAChD,QAAIV,GAAJ,EAAS,OAAOE,YAAYJ,GAAZ,EAAiBE,GAAjB,CAAP;AACT,QAAI,CAACU,IAAL,EAAW,OAAOZ,IAAIa,IAAJ,CAAS,GAAT,CAAP;AACX,WAAOb,IAAIM,IAAJ,CAASM,IAAT,CAAP;AACD,GAJD;AAKD,CAND;;AASAf,QAAQiB,MAAR,GAAiB,UAAUf,GAAV,EAAeC,GAAf,EAAoB;AACnCL,OAAKmB,MAAL,CAAYf,IAAIgB,IAAhB,EAAsB,UAAUb,GAAV,EAAeU,IAAf,EAAqB;AACzC,QAAIV,GAAJ,EAAS,OAAOE,YAAYJ,GAAZ,EAAiBE,GAAjB,CAAP;AACT,WAAOF,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,IAArB,CAAP;AACD,GAHD;AAID,CALD;;AAQAf,QAAQmB,OAAR,GAAkB,UAAUjB,GAAV,EAAeC,GAAf,EAAoB;AACpCL,OAAKsB,MAAL,CAAY,EAAEC,KAAKnB,IAAIW,MAAJ,CAAWC,EAAlB,EAAZ,EAAoC,UAAUT,GAAV,EAAeU,IAAf,EAAqB;AACvD,QAAIV,GAAJ,EAAS,OAAOE,YAAYJ,GAAZ,EAAiBE,GAAjB,CAAP;AACT,QAAI,CAACU,IAAL,EAAW,OAAOZ,IAAIa,IAAJ,CAAS,GAAT,CAAP;AACX,WAAOb,IAAIM,IAAJ,CAASM,IAAT,CAAP;AACD,GAJD;AAKD,CAND;;AAQAf,QAAQsB,MAAR,GAAiB,UAAUpB,GAAV,EAAeC,GAAf,EAAoB;AACnCL,OAAKwB,MAAL,CAAY,EAAED,KAAKnB,IAAIW,MAAJ,CAAWC,EAAlB,EAAZ,EAAoCZ,IAAIgB,IAAxC,EAA8C,UAAUb,GAAV,EAAeU,IAAf,EAAqB;AACjE,QAAIV,GAAJ,EAAS,OAAOE,YAAYJ,GAAZ,EAAiBE,GAAjB,CAAP;AACT,WAAOF,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,IAArB,CAAP;AACD,GAHD;AAID,CALD;;AAOA,SAASR,WAAT,CAAsBJ,GAAtB,EAA2BE,GAA3B,EAAgC;AAC9B,SAAOF,IAAIK,MAAJ,CAAW,GAAX,EAAgBQ,IAAhB,CAAqBX,GAArB,CAAP;AACD","file":"poll.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /polls              ->  index\n * POST    /polls              ->  create\n * GET     /polls/:id          ->  show\n * PUT     /polls/:id          ->  update\n * DELETE  /polls/:id          ->  destroy\n */\n'use strict'\n\nconst Poll = require('./poll.model')\n\n// Get list of polls\nexports.index = function (req, res) {\n  Poll.find(function (err, polls) {\n    if (err) {\n      return handleError(res, err)\n    }\n    return res.status(200).json({ results: polls })\n  })\n}\n\n// Get a single poll\nexports.show = function (req, res) {\n  Poll.findById(req.params.id, function (err, poll) {\n    if (err) return handleError(res, err)\n    if (!poll) return res.send(404)\n    return res.json(poll)\n  })\n}\n\n// Creates a new poll in the DB\nexports.create = function (req, res) {\n  Poll.create(req.body, function (err, poll) {\n    if (err) return handleError(res, err)\n    return res.status(200).json(poll)\n  })\n}\n\n// Deletes a poll\nexports.destroy = function (req, res) {\n  Poll.remove({ _id: req.params.id }, function (err, poll) {\n    if (err) return handleError(res, err)\n    if (!poll) return res.send(404)\n    return res.json(poll)\n  })\n}\n\nexports.update = function (req, res) {\n  Poll.update({ _id: req.params.id }, req.body, function (err, poll) {\n    if (err) return handleError(res, err)\n    return res.status(200).json(poll)\n  })\n}\n\nfunction handleError (res, err) {\n  return res.status(500).send(err)\n}\n"]}